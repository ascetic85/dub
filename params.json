{"name":"Dub","body":"### Dub documentation\r\n\r\n# Dub (Doxygen based Ubiquitous Binder)\r\n\r\nThis is a tool to ease the creation of scripting language bindings for a C++ library.\r\nIt was initially developed to create the OpenCV bindings for Lua in Lubyk (http://lubyk.org).\r\n\r\nThe generator uses the xml output from Doxygen to avoid parsing C++ code by itself.\r\n\r\nHomepage: [lubyk/dub](http://lubyk.org/en/project311.html)\r\n\r\nPlease donate so we can free up some time to write good documentation...\r\n\r\n[![Click here to lend your support to: Doxygen based Lua binder (Dub) and make a donation at www.pledgie.com !](https://www.pledgie.com/campaigns/17041.png?skin_name=chrome)](http://www.pledgie.com/campaigns/17041)\r\n\r\n\r\n# Features\r\n\r\nCurrently, the parser supports:\r\n\r\n* public methods\r\n* public attributes read/write\r\n* pseudo-attributes read/write by calling getter/setter methods.\r\n* custom bindings (for methods and global functions).\r\n* custom read/write attributes (with void *userdata helper, union handling)\r\n* public class methods\r\n* public static attributes read/write\r\n* pointer to member (gc protected)\r\n* cast(default)/copy/disable const attribute\r\n* member pointer assignment (gc protected)\r\n* natural casting from std::string to string type (can include '\\0')\r\n* class instantiation from templates through typedefs\r\n* class alias through typedefs\r\n* bindings for superclass\r\n* automatic casting to base class\r\n* default argument values\r\n* overloaded functions with optimized method selection from arguments\r\n* operator overloading (even operator[], operator() and operator+= and such)\r\n* return value optimization (no copy)\r\n* simple type garbage collection optimization (no __gc method)\r\n* namespace\r\n* nested classes\r\n* class enums\r\n* global enums\r\n* build system\r\n* group multiple bindings in a single library\r\n* rewrite class or library names\r\n* native Lua table wrapping setmetatable({super = obj}, Vect)\r\n* callback from C++ with error handling in Lua.\r\n* fully tested\r\n\r\n# TODO\r\n\r\n* documentation\r\n\r\n# Usage\r\n\r\nCreate an inspector that will inspect a list of headers given by 'INPUT' (a list\r\nof files and directories. You need to have Doxygen installed\r\n\r\n    local ins = dub.Inspector {\r\n      INPUT    = 'foo/include',\r\n      -- optional\r\n      DOXYGEN_CMD = 'path/to/doxygen',\r\n    }\r\n  \r\nCreate bindings:\r\n\r\n    local binder = dub.LuaBinder()\r\n  \r\n    binder:bind(ins, {\r\n      output_directory = 'tmp',\r\n    })\r\n    \r\nYou should now have a 'cpp' file for each class in tmp.\r\n\r\nExample to build a class called 'Vect':\r\n\r\n    binder:build {\r\n      work_dir = '.',\r\n      output   = 'tmp/Vect.so',\r\n      inputs   = {\r\n        'tmp/dub/dub.cpp',\r\n        'tmp/Vect.cpp',\r\n        'fixtures/pointers/vect.cpp',\r\n      },\r\n      includes = {\r\n        'tmp',\r\n        'foo/include',\r\n      },\r\n    }     \r\n\r\nYou can now use your class:\r\n\r\n    package.cpath = package.cpath .. 'tmp/?.so;'\r\n    require 'Vect'\r\n    local v = Vect(1,3)\r\n    v.x = 4\r\n    print(v.x)\r\n    -- etc\r\n\r\nPlease read the tests for more detail until the documentation is updated.\r\n\r\n# Things to know\r\n\r\nThe bindings are made to look as close as possible to the C++ versions. This means that constructors look like C++: Vect(1, 2). Behind the hood, this is resolved as a call to Vect.new(1,2). By storing the 'new' function in a local variable, you can remove this small overhead.\r\n\r\nLua bindings usage examples:\r\n\r\n    -- Create a Car instance, Car.Noisy is a constant defined in a C++ enum.\r\n    local car = Car('my car', Car.Noisy)\r\n  \r\n    -- Execute the C++ 'brandName' method.\r\n    print(car:brandName())\r\n  \r\n    -- Set the name of the car (public C++ attribute, a std::string here).\r\n    car.name = 'my old car'\r\n  \r\n    -- Get the std::string name\r\n    print(car.name)\r\n  \r\n    -- You can store \\0 in strings\r\n    car.name = 'my old car\\0which I did not like'\r\n  \r\n    -- Create a vector\r\n    local v1 = Vect(1,2)\r\n    local v2 = Vect(4,5)\r\n  \r\n    -- Calls the overloaded operator+(). This is return value optimized to allocate a single Vect.\r\n    local v3 = v1 + v2\r\n  \r\n    -- operator*(double d)\r\n    v3 = v1 * 4\r\n  \r\n    -- cross product\r\n    -- operator*(const Vect &v)\r\n    print(v3 * Vect(1,2))\r\n\r\n","tagline":"A Lua bindings generator that uses Doxygen parsed C/C++ code.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}